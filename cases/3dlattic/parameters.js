let NUM_NODES = 26;																							// Number of nodes of the initial system
let NUM_ELEMS = 37;																							// Number of elements of the initial system

// Separated coordinates matrices. Constant term to be multiplied by values of the chosen parameters (see PGD separation for more details).
const COORS_1 = [[-1.00, 0.00, 0.00],[-0.50, 0.00, 0.00],[-0.50, 0.00, 0.00],[0.50, 0.00, 0.00],[0.50, 0.00, 0.00],[1.00, 0.00, 0.00],[0.50, 0.00, 0.00],[-0.50, 0.00, 0.00],[-1.00, 0.00, 0.00],[-0.50, 0.00, 0.00],[-0.50, 0.00, 0.00],[0.50, 0.00, 0.00],[0.50, 0.00, 0.00],[1.00, 0.00, 0.00],[0.50, 0.00, 0.00],[-0.50, 0.00, 0.00],[-1.00, 0.00, 0.00],[-0.50, 0.00, 0.00],[0.50, 0.00, 0.00],[1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[-0.50, 0.00, 0.00],[0.50, 0.00, 0.00],[1.00, 0.00, 0.00],[-0.50, 0.00, 0.00],[0.50, 0.00, 0.00]];
const COORS_2 = [[1.00, 0.00, 0.00],[1.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[1.00, 0.00, 0.00],[1.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[1.00, 0.00, 0.00],[1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[1.00, 0.00, 0.00],[1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[-1.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00]];
const COORS_3 = [[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 1.00, 0.00],[0.00, 1.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, -1.00, 0.00],[0.00, -1.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 1.00, 0.00],[0.00, 1.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, -1.00, 0.00],[0.00, -1.00, 0.00],[0.00, 1.00, 0.00],[0.00, 1.00, 0.00],[0.00, 1.00, 0.00],[0.00, 1.00, 0.00],[0.00, -1.00, 0.00],[0.00, -1.00, 0.00],[0.00, -1.00, 0.00],[0.00, -1.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.0]];
const COORS_4 = [[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, 1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, -1.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00],[0.00, 0.00, 0.00]];

// Connectivity matrix for a unit cell.
const CONNECT = [[1, 2],[2, 3],[3, 4],[5, 4],[5, 6],[7, 5],[8, 7],[8, 2],[9, 10],[10, 11],[11, 12],[13, 12],[13, 14],[15, 13],[16, 15],[16, 10],[17, 18],[18, 11],[19, 12],[19, 20],[4, 19],[3, 18],[21, 22],[22, 16],[23, 15],[23, 24],[7, 23],[8, 22],[25, 18],[26, 19],[23, 26],[22, 25],[25, 10],[26, 13],[5, 26],[2, 25],[25, 26]];

// Matrix for SVD approximation of sin(theta)
const STH_ARR = [[63.6573,[-0.0905,-0.0915,-0.0924,-0.0933,-0.0941,-0.0950,-0.0958,-0.0966,-0.0974,-0.0981,-0.0989,-0.0996,-0.1003,-0.1010,-0.1016,-0.1023,-0.1029,-0.1035,-0.1041,-0.1047,-0.1052,-0.1057,-0.1063,-0.1067,-0.1072,-0.1077,-0.1081,-0.1085,-0.1089,-0.1092,-0.1096,-0.1099,-0.1102,-0.1105,-0.1107,-0.1110,-0.1112,-0.1114,-0.1115,-0.1117,-0.1118,-0.1119,-0.1120,-0.1120,-0.1121,-0.1121,-0.1121,-0.1120,-0.1120,-0.1119,-0.1118,-0.1117,-0.1115,-0.1114,-0.1112,-0.1110,-0.1107,-0.1105,-0.1102,-0.1099,-0.1096,-0.1092,-0.1089,-0.1085,-0.1081,-0.1077,-0.1072,-0.1067,-0.1063,-0.1057,-0.1052,-0.1047,-0.1041,-0.1035,-0.1029,-0.1023,-0.1016,-0.1010,-0.1003,-0.0996,-0.0989,-0.0981,-0.0974,-0.0966,-0.0958,-0.0950,-0.0941,-0.0933,-0.0924,-0.0915,-0.0905],[-0.0906,-0.0955,-0.1003,-0.1049,-0.1094,-0.1138,-0.1182,-0.1225,-0.1267,-0.1310,-0.1352,-0.1393,-0.1435,-0.1476,-0.1517,-0.1558,-0.1598,-0.1638,-0.1679,-0.1719,-0.1759,-0.1798,-0.1838,-0.1878,-0.1917,-0.1957,-0.1996,-0.2035,-0.2075,-0.2114,-0.2153,-0.2192,-0.2231,-0.2269,-0.2308,-0.2347,-0.2386,-0.2425,-0.2463,-0.2502,-0.2540,-0.2579,-0.2617,-0.2656,-0.2694,-0.2733,-0.2771,-0.2809,-0.2848,-0.2886,-0.2924]],[3.1066,[0.2488,0.2287,0.2101,0.1926,0.1760,0.1603,0.1454,0.1311,0.1175,0.1044,0.0919,0.0799,0.0684,0.0573,0.0467,0.0365,0.0268,0.0174,0.0084,-0.0002,-0.0084,-0.0162,-0.0237,-0.0309,-0.0377,-0.0442,-0.0503,-0.0561,-0.0615,-0.0667,-0.0715,-0.0760,-0.0801,-0.0840,-0.0875,-0.0908,-0.0937,-0.0963,-0.0986,-0.1006,-0.1023,-0.1036,-0.1047,-0.1055,-0.1059,-0.1061,-0.1059,-0.1055,-0.1047,-0.1036,-0.1023,-0.1006,-0.0986,-0.0963,-0.0937,-0.0908,-0.0875,-0.0840,-0.0801,-0.0760,-0.0715,-0.0667,-0.0615,-0.0561,-0.0503,-0.0442,-0.0377,-0.0309,-0.0237,-0.0162,-0.0084,-0.0002,0.0084,0.0174,0.0268,0.0365,0.0467,0.0573,0.0684,0.0799,0.0919,0.1044,0.1175,0.1311,0.1454,0.1603,0.1760,0.1926,0.2101,0.2287,0.2488],[-0.3277,-0.2911,-0.2604,-0.2337,-0.2100,-0.1884,-0.1687,-0.1504,-0.1334,-0.1174,-0.1023,-0.0879,-0.0743,-0.0613,-0.0488,-0.0368,-0.0252,-0.0140,-0.0032,0.0074,0.0176,0.0275,0.0372,0.0467,0.0559,0.0649,0.0738,0.0825,0.0910,0.0994,0.1076,0.1157,0.1237,0.1316,0.1393,0.1470,0.1545,0.1620,0.1693,0.1766,0.1838,0.1909,0.1980,0.2050,0.2119,0.2187,0.2255,0.2323,0.2390,0.2456,0.2522]],[0.1100,[0.3596,0.2406,0.1494,0.0786,0.0231,-0.0202,-0.0539,-0.0798,-0.0992,-0.1132,-0.1227,-0.1285,-0.1311,-0.1311,-0.1288,-0.1246,-0.1189,-0.1118,-0.1037,-0.0948,-0.0852,-0.0750,-0.0646,-0.0538,-0.0430,-0.0321,-0.0213,-0.0107,-0.0002,0.0099,0.0196,0.0290,0.0379,0.0463,0.0542,0.0615,0.0681,0.0742,0.0796,0.0843,0.0883,0.0916,0.0942,0.0960,0.0971,0.0975,0.0971,0.0960,0.0942,0.0916,0.0883,0.0843,0.0796,0.0742,0.0681,0.0615,0.0542,0.0463,0.0379,0.0290,0.0196,0.0099,-0.0002,-0.0107,-0.0213,-0.0321,-0.0430,-0.0538,-0.0646,-0.0750,-0.0852,-0.0948,-0.1037,-0.1118,-0.1189,-0.1246,-0.1288,-0.1311,-0.1311,-0.1285,-0.1227,-0.1132,-0.0992,-0.0798,-0.0539,-0.0202,0.0231,0.0786,0.1494,0.2406,0.3596],[-0.4560,-0.2232,-0.0806,0.0124,0.0748,0.1170,0.1453,0.1637,0.1748,0.1805,0.1821,0.1805,0.1764,0.1704,0.1629,0.1543,0.1447,0.1343,0.1234,0.1120,0.1003,0.0882,0.0760,0.0637,0.0512,0.0386,0.0260,0.0134,0.0008,-0.0118,-0.0244,-0.0370,-0.0494,-0.0619,-0.0742,-0.0865,-0.0987,-0.1109,-0.1230,-0.1350,-0.1469,-0.1588,-0.1705,-0.1822,-0.1938,-0.2054,-0.2168,-0.2282,-0.2395,-0.2508,-0.2619]],[0.0078,[-0.3701,-0.0817,0.0738,0.1512,0.1812,0.1824,0.1662,0.1401,0.1091,0.0763,0.0439,0.0134,-0.0145,-0.0390,-0.0601,-0.0774,-0.0912,-0.1015,-0.1085,-0.1124,-0.1135,-0.1120,-0.1082,-0.1023,-0.0947,-0.0857,-0.0754,-0.0641,-0.0521,-0.0396,-0.0268,-0.0139,-0.0010,0.0115,0.0237,0.0352,0.0461,0.0561,0.0652,0.0733,0.0803,0.0861,0.0906,0.0939,0.0959,0.0966,0.0959,0.0939,0.0906,0.0861,0.0803,0.0733,0.0652,0.0561,0.0461,0.0352,0.0237,0.0115,-0.0010,-0.0139,-0.0268,-0.0396,-0.0521,-0.0641,-0.0754,-0.0857,-0.0947,-0.1023,-0.1082,-0.1120,-0.1135,-0.1124,-0.1085,-0.1015,-0.0912,-0.0774,-0.0601,-0.0390,-0.0145,0.0134,0.0439,0.0763,0.1091,0.1401,0.1662,0.1824,0.1812,0.1512,0.0738,-0.0817,-0.3701],[0.3972,-0.1037,-0.2476,-0.2620,-0.2265,-0.1735,-0.1172,-0.0637,-0.0157,0.0258,0.0610,0.0900,0.1135,0.1319,0.1458,0.1558,0.1623,0.1657,0.1664,0.1648,0.1611,0.1555,0.1485,0.1400,0.1303,0.1195,0.1078,0.0953,0.0821,0.0683,0.0539,0.0390,0.0238,0.0081,-0.0078,-0.0240,-0.0404,-0.0571,-0.0739,-0.0908,-0.1078,-0.1250,-0.1422,-0.1595,-0.1768,-0.1942,-0.2116,-0.2290,-0.2464,-0.2638,-0.2812]],[0.0006,[0.3040,-0.1365,-0.2391,-0.2060,-0.1268,-0.0419,0.0311,0.0861,0.1221,0.1409,0.1451,0.1378,0.1218,0.0999,0.0744,0.0471,0.0197,-0.0066,-0.0309,-0.0524,-0.0706,-0.0854,-0.0964,-0.1038,-0.1075,-0.1079,-0.1050,-0.0993,-0.0911,-0.0807,-0.0684,-0.0548,-0.0401,-0.0248,-0.0092,0.0064,0.0215,0.0359,0.0493,0.0614,0.0721,0.0811,0.0883,0.0935,0.0966,0.0977,0.0966,0.0935,0.0883,0.0811,0.0721,0.0614,0.0493,0.0359,0.0215,0.0064,-0.0092,-0.0248,-0.0401,-0.0548,-0.0684,-0.0807,-0.0911,-0.0993,-0.1050,-0.1079,-0.1075,-0.1038,-0.0964,-0.0854,-0.0706,-0.0524,-0.0309,-0.0066,0.0197,0.0471,0.0744,0.0999,0.1218,0.1378,0.1451,0.1409,0.1221,0.0861,0.0311,-0.0419,-0.1268,-0.2060,-0.2391,-0.1365,0.3040],[-0.2506,0.3730,0.2575,0.0669,-0.0770,-0.1630,-0.2025,-0.2092,-0.1945,-0.1667,-0.1318,-0.0938,-0.0554,-0.0185,0.0159,0.0470,0.0745,0.0982,0.1182,0.1344,0.1472,0.1565,0.1628,0.1660,0.1666,0.1646,0.1603,0.1539,0.1454,0.1352,0.1234,0.1100,0.0953,0.0793,0.0622,0.0440,0.0249,0.0049,-0.0158,-0.0373,-0.0593,-0.0820,-0.1052,-0.1288,-0.1529,-0.1774,-0.2022,-0.2273,-0.2527,-0.2784,-0.3043]],[0.0001,[0.2134,-0.2880,-0.2062,-0.0285,0.1050,0.1696,0.1767,0.1455,0.0941,0.0363,-0.0185,-0.0646,-0.0988,-0.1203,-0.1295,-0.1278,-0.1168,-0.0987,-0.0756,-0.0494,-0.0220,0.0051,0.0306,0.0533,0.0725,0.0877,0.0984,0.1047,0.1065,0.1041,0.0977,0.0879,0.0751,0.0599,0.0429,0.0248,0.0061,-0.0125,-0.0304,-0.0471,-0.0622,-0.0751,-0.0855,-0.0932,-0.0979,-0.0994,-0.0979,-0.0932,-0.0855,-0.0751,-0.0622,-0.0471,-0.0304,-0.0125,0.0061,0.0248,0.0429,0.0599,0.0751,0.0879,0.0977,0.1041,0.1065,0.1047,0.0984,0.0877,0.0725,0.0533,0.0306,0.0051,-0.0220,-0.0494,-0.0756,-0.0987,-0.1168,-0.1278,-0.1295,-0.1203,-0.0988,-0.0646,-0.0185,0.0363,0.0941,0.1455,0.1767,0.1696,0.1050,-0.0285,-0.2062,-0.2880,0.2134],[-0.1242,0.4160,-0.0446,-0.2525,-0.2560,-0.1695,-0.0615,0.0356,0.1097,0.1584,0.1843,0.1911,0.1832,0.1645,0.1383,0.1075,0.0743,0.0404,0.0071,-0.0246,-0.0540,-0.0805,-0.1039,-0.1239,-0.1404,-0.1534,-0.1629,-0.1690,-0.1719,-0.1715,-0.1681,-0.1618,-0.1528,-0.1412,-0.1271,-0.1107,-0.0922,-0.0716,-0.0491,-0.0249,0.0009,0.0283,0.0571,0.0873,0.1187,0.1512,0.1848,0.2193,0.2548,0.2911,0.3282]],[0.0000,[-0.1334,0.3310,0.0270,-0.1785,-0.2061,-0.1295,-0.0220,0.0716,0.1314,0.1540,0.1446,0.1125,0.0672,0.0176,-0.0296,-0.0694,-0.0989,-0.1167,-0.1228,-0.1182,-0.1045,-0.0836,-0.0578,-0.0294,-0.0002,0.0277,0.0528,0.0740,0.0902,0.1010,0.1060,0.1054,0.0995,0.0887,0.0738,0.0557,0.0353,0.0135,-0.0086,-0.0300,-0.0499,-0.0674,-0.0818,-0.0925,-0.0991,-0.1013,-0.0991,-0.0925,-0.0818,-0.0674,-0.0499,-0.0300,-0.0086,0.0135,0.0353,0.0557,0.0738,0.0887,0.0995,0.1054,0.1060,0.1010,0.0902,0.0740,0.0528,0.0277,-0.0002,-0.0294,-0.0578,-0.0836,-0.1045,-0.1182,-0.1228,-0.1167,-0.0989,-0.0694,-0.0296,0.0176,0.0672,0.1125,0.1446,0.1540,0.1314,0.0716,-0.0220,-0.1295,-0.2061,-0.1785,0.0270,0.3310,-0.1334],[0.0511,-0.3079,0.3264,0.2435,0.0030,-0.1662,-0.2301,-0.2147,-0.1543,-0.0760,0.0021,0.0700,0.1226,0.1586,0.1786,0.1844,0.1782,0.1624,0.1394,0.1112,0.0798,0.0467,0.0132,-0.0194,-0.0503,-0.0789,-0.1045,-0.1267,-0.1453,-0.1599,-0.1707,-0.1773,-0.1799,-0.1785,-0.1730,-0.1638,-0.1507,-0.1340,-0.1138,-0.0902,-0.0634,-0.0334,-0.0006,0.0351,0.0734,0.1142,0.1574,0.2029,0.2505,0.3001,0.3516]]];

const A_ARR   = new Array(51);																				// Initialization of array for parameter a.
const B_ARR   = new Array(51);																				// Initialization of array for parameter b.
const AL_ARR  = new Array(91);																				// Initialization of array for parameter alfa.
const SAL_ARR = new Array(91);																				// Initialization of array for sin(alfa).
const CAL_ARR = new Array(91);																				// Initialization of array for cos(alfa).
const PHI_ARR = new Array(51);																				// Initialization of array for parameter phi.
const COORS_T = new Array(26);																				// Initialization of matrix for sum of separable coordinate matrices.

let B_PM  = 25; 																							// Index to address array b.
let A_PM  = 25; 																							// Index to address array a.
let AL_PM = 15;																								// Index to address array alfa.
let PHI_PM = 10;																							// Index to address array phi.
let STH    = 0;																								// Initialization of sin(theta).

for (var i = 0; i < STH_ARR.length; i++)
	STH += STH_ARR[i][0]*STH_ARR[i][1][AL_PM]*STH_ARR[i][2][PHI_PM];										// Computation of the initial approximation for sin(theta).

for (var i = 0; i < A_ARR.length; i++) {
    A_ARR[i]   = 0.3 + i*(0.7-0.3)/(51-1);																	// Filling of array a. 
    B_ARR[i]   = 1.0 + i*(1.5-1.0)/(51-1);																	// Filling of array b. 
	PHI_ARR[i] = 0.75 + i*(2-0.75)/(51-1);																	// Filling of array phi. 
}

for (var i = 0; i < AL_ARR.length; i++) {
    AL_ARR[i]    = 45 + i*(135-45)/(91-1);																	// Filling of array alfa.
	SAL_ARR[i]   = Math.sin(0.25*Math.PI + 0.5*i*Math.PI/(91-1));											// Filling of array sin(alfa).
	CAL_ARR[i]   = Math.cos(0.25*Math.PI + 0.5*i*Math.PI/(91-1));											// Filling of array cos(alfa).
}

for (var i = 0; i < COORS_T.length; i++) {
	COORS_T[i] = new Array(3);																				// Initialization of matrix. 

	for (var j = 0; j < COORS_T[i].length; j++) {
		COORS_T[i][j] = COORS_1[i][j]*B_ARR[B_PM] +  														// Filling of matrix by summing terms. 
		                COORS_2[i][j]*A_ARR[A_PM]*CAL_ARR[AL_PM] + 
						COORS_3[i][j]*A_ARR[A_PM]*SAL_ARR[AL_PM] + 
						COORS_4[i][j]*A_ARR[A_PM]*PHI_ARR[PHI_PM]*STH;
	}
}

let slider = {																								// Object for defining the properties of the controller.
	b:     B_ARR[B_PM],																						// Initial property for controller a.
	a:     A_ARR[A_PM],																						// Initial property for controller b.
	alpha: AL_ARR[AL_PM],																					// Initial property for controller alfa.
	phi:   PHI_ARR[PHI_PM],																					// Initial property for controller phi.
	nX:    1,																								// Initial property for horizontal repetition.
	nY:    1,																								// Initial property for horizontal repetition.
	nZ:    1,																								// Initial property for horizontal repetition.
	rectr: function() {centerFigure()}																			// Function that recenters the image.
};